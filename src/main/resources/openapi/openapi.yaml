openapi: 3.0.3
info:
  title: User Management API
  version: '1.0'
  description: API for managing users

tags:
  - name: Users
    description: User Management CRUD Operation

servers:
  - url: http://localhost:8080/api/v1
    description: Localhost

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Returns a list of all users
      operationId: users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns a single user by ID
      operationId: getUser
      parameters:
        - in: path
          name: userId
          description: ID of the user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update user
      description: Updates an existing user
      operationId: updateUser
      parameters:
        - in: path
          name: userId
          description: ID of the user to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '400':
          description: Invalid input
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user by ID
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          description: ID of the user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: User not found

components:
  schemas:
    UserRequest:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "9151f21f-43ae-43b4-92f3-f4af67cdf544"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john.doe@example.com"
